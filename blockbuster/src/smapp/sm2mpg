#!/usr/bin/env bash 
#set -xv
#set -e
#
#       Convert an sm file into an MPEG file...
#
function usage() {
	echo 
    echo "sm2mpg: usage:"
	echo
    echo "sm2mpg [OPTIONS] infile.sm outfile.{mpg|mp4|mov}"
	echo
	echo "FILENAME EXTENSIONS"
	echo ".mpg extension:  mpeg is used instead of ffmpeg, unless you use -c, -m, or -x options."
	echo ".mp4 extension:  ffmpeg will encode the movie with H264, unless you use -c or -m option"
	echo ".mov extension:  ffmpeg will encode the movie with mjpeg unless you use -c or -x option"
	echo
    echo "Note: If the input movie is stereo, then only the left hand frames (odd frames) are used." 
	echo
    echo "OPTIONS:"
    echo "-c/--codec string: Pass '-c:v string' to ffmpeg, overriding file extension"
	echo "-d/--debug:        Be insanely verbose and redirect all output to a file"
    echo "-f/--fps n:        Set fps in output movie to value (default: match input fps) "
    echo "-F/--infps val:    Use 'val' as FPS for input streaming movie"
	echo "-h/--help:         Show this menu"
	echo "-k/--keep:         Keep temp directory" 
	echo "-m/--mjpeg:        Use mjpeg encoder" 
    echo "-s/--stereo:       Interpret the input movie as stereo." 
    echo "-t/--tmpdir name:  Use the given directory for scratch instead of a random location in /tmp/$USER"    
	echo "-v/--verbose:      Be rather chatty about what's happening"
	echo "-x/--h264:         Use libx264 encoder" 
	echo
}

# =========================================
verbose=false
function dbecho() {
	if $verbose; then 
		echo -e "$@"
	fi
}

# =========================================
function runecho () {
	if $verbose; then 
		echo "$@"
	fi
	"$@"
}

# =========================================
function errexit() {    
    echo '*************************************************'
    echo "ERROR: $1"
    echo '*************************************************'
	CleanupTempdir
    exit 1
}

# =========================================
function CleanupTempdir () {
    if ! $keep; then 
		if $delete_tmpdir; then 
			runecho rm -rf ${tmpdir}
		else
			runecho rm -rf ${tmpdir}/${framenamebase}_junk_*
		fi
	else 
		echo "Keeping temp directory $tmpdir"
	fi	
}

# ==========================================================
delete_tmpdir=false
stereo=false
outfps=
infps=
keep=false
debug=false
ffmpeg=false
outcodec=""
# ==========================================================
# parse arguments and set variables
argnum=0
while [ "$1" != "" ]; do 
   if [ "${1:0:1}" != "-" ]; then 
        if [ "$infile" == "" ]; then 
            infile="$1"
        elif [ "$outfile" == "" ]; then
            outfile="$1"
        else
            echo "Error: too many arguments"
            usage
            exit 1
        fi
        shift 1;
    else
       case $1 in
           "-c"|"--codec")   outcodec="$2"; ffmpeg=true
		                                            shift 2;;
		   "-d"|"--debug")   debug=true;            shift 1;;
		   "-f"|"--fps")     outfps="$2";           shift 2;;
           "-F"|"--infps")   infps="$2";            shift 2;;
           "-h"|"--help")    usage;                 exit 0;; 
           "-k"|"--keep")    keep=true;             shift 1;;
           "-m"|"--mjpeg")   outcodec="mjpeg";  ffmpeg=true
                                                    shift 1;;
           "-s"|"--stereo")  stereo=true;           shift 1;;
           "-t"|"--tmpdir")  tmpdir="$2";           shift 2;;
		   "-v"|"--verbose") verbose=true;          shift 1;;
		   "-x"|"--x264")    outcodec="libx264";  ffmpeg=true
                                                    shift 1;;
		   *)    usage;  errexit "Unknown option '$1'";;
       esac
   fi
done
if $debug; then 
	set -xv
fi

if [ "$outfile" == "" ]; then 
    usage
    errexit "Not enough args" 
fi    

#
#       nframes/Stereo
#

# arg checking
if [ "${infile:0:1}" != '/' ]; then 
    infile=$(pwd)/$infile
fi
if [ "${infile: -3}" != '.sm' ]; then 
    errexit "Please specify an input movie name ending with '.sm'"
fi

tmpdir=${tmpdir:-/tmp/$USER/sm2mpg.tmp.$RANDOM/}
if [ -e "$tmpdir" ]; then 
	delete_tmpdir=false
else
	delete_tmpdir=true
fi
runecho mkdir -p $tmpdir || errexit "Cannot make tmp directory $tmpdir"

if [ "${outfile:0:1}" != '/' ]; then 
    outfile=$(pwd)/$outfile
fi
extension="${outfile: -4}" 
if [ "$extension" == '.mp4' ] ; then 
	ffmpeg=true
	outcodec=${outcodec:-"libx264"}
elif [ "$extension" == '.mov' ] ; then 
	ffmpeg=true
	outcodec=${outcodec:-"mjpeg"}
elif [ "$extension" != '.mpg' ] ; then 
    errexit "Please specify an output movie name ending with '.mpg', '.mov' or '.mp4'"
fi

if [ "$outcodec" != "" ]; then
	outcodec="-c:v $outcodec"
fi
framenamebase=_$(basename $outfile | sed 's/.sm//')

sminfo_output=$(sminfo $infile)
if echo "$sminfo_output" | grep Stereo >/dev/null 2>&1; then
    stereo=true
	dbecho "Detected stereo input movie"
fi
if [ "$infps" == "" ] ; then 
	infps=$(echo "$sminfo_output" | grep FPS | cut -d " " -f2)
	dbecho "FPS of $infps detected in input movie (see -F flag to change)"
fi
if [ "$outfps" == "" ]; then 
	outfps=$infps
	dbecho "Setting output FPS to $infps to match input movie (see -f flag to change)"
fi

ninput=$(echo "$sminfo_output" | grep Frames | cut -d " " -f2)
dbecho "There are $ninput frames in input movie"
skip=1
if $stereo; then 
    skip=2
    ninput=$(expr $ninput / 2)
	dbecho "Doubled the number of input frames because of stereo: nframes is $ninput"
fi

#
#	Grab frame sizes
#
xsize1=$(echo "$sminfo_output" | grep size | grep 'Level: 0' | awk '{print $5;}') 
ysize1=$(echo "$sminfo_output" | grep size | grep 'Level: 0' | awk '{print $7;}') 

#
#       Size to the lower factor of 2...
#
xsize=$(expr $xsize1 / 2 \* 2)
ysize=$(expr $ysize1 / 2 \* 2)
dbecho "Output size will be $xsize x $ysize"
#
#       Frames/fps/time...
#
noutput=$(python -c "print int(${ninput}/float(${outfps}) * ${infps} )")  || errexit "Cannot determine number of output frames"
dbecho "$noutput frames will be in output"

last=$(python -c "print int($noutput - 1)")
dbecho "Last frame is $last"

#=================================================
# helper for extraction, same for mpg and mp4
function runConvert(){
	cmd="$1"
	dbecho $cmd
	outlog=conversion.outlog
	if ! $verbose; then
		$cmd >& $outlog 
	else 
		$cmd |& tee $outlog 
	fi
	if [ $? != 0 ] || ! [ -s $outfile ] || grep Segmentation $outlog; then
		errexit "Creation command failed.  Results are in $outlog.  You might try --ffmpeg option"
	fi
	runecho rm -f $outlog
}

#=================================================
# helper for linking, same for mpg and mp4
function linkFrames() {
	extensions="$1"
	echo "Linking $noutput frames to approximate the desired framerate ($outfps)"
	linknum=0
	while [ $linknum -lt $noutput ] ; do 
		echo -e "\rFrame: $linknum out of $noutput\c"
		t=$(python -c "print float(${linknum}*1.001)/${outfps} ")
		infileFrame=$(python -c "print int(${t} * $infps) * $skip")
		outfileFrame=${linknum}
		for ext in $extensions; do 
			ln -s "$tmpdir/${framenamebase}_junk_${infileFrame}.${ext}" "$tmpdir/${framenamebase}_junk_ln_${outfileFrame}.${ext}"
		done
		let linknum++
	done
	echo
}
#=================================================
verboseflag=
if $verbose; then 
	verboseflag="-v 1"
fi
if $ffmpeg; then 
	echo "Extracting temporary frames to PNG using sm2img...." 
	runecho sm2img -F png -s $skip $infile $tmpdir/${framenamebase}_junk_%d.png || errexit "sm2img returned nonzero exit status, aborting"

	linkFrames "png"

	echo "Converting frames to h264 using ffmpeg x264 encoder...." 
	runConvert "ffmpeg -i $tmpdir/${framenamebase}_junk_ln_%d.png $outcodec -vf scale=${xsize}:${ysize} -r $outfps $outfile"
	
else
	echo "Extracting the frames in YUV format using sm2img..."	
	runecho sm2img -F yuv -s $skip $infile $tmpdir/${framenamebase}_junk_%d || errexit "sm2img returned nonzero exit status, aborting"
	# runecho sm2img  -F png -s $skip $infile $tmpdir/${framenamebase}_junk_%d.png || errexit "sm2img failed"

	linkFrames "Y U V"
	# linkFrames "png"
	
	echo "Converting frames to mpeg using LibGen mpeg command...." 
	runConvert "mpeg  -PF -p $outfps -a 0 -b $last -h $xsize -v $ysize $tmpdir/${framenamebase}_junk_ln_ -s $outfile"
fi

#=================================================
#
#       clean up...
#
CleanupTempdir

echo "movie $outfile created successfully"
#
#	Done!
#
