We are now supporting the use of metadata in movies.  This does not require a new file format per se, just an extension to the current format.  We shall store the metadata at the end of SM 2.0 movies.  OK, so it's a new format.  So sue me.  

USE CASES: 
    Eventually, we would like movie information to be available in the Lorenz Web toolkit.  To that end, we will need a tool that sets and gets tags, and also can work with thumbnails.  
    Scott Miller and other experts should be able to add metadata and query both files, directories, and lists of files for metadata.  
    Tag values shall be of three types for now:  
             1.  a simple text string with zero or more chars
             2.  a list of text strings, for storing keywords, or authors or other "list" types.  This will just be stored as a string starting with the special 9-char sequence: '[SM_LIST]', followed by a series of list elements, delimited by the 13-char sequence '[SM_LITEM]'.  Example:  "[SM_LIST]This is item 1[SM_LITEM]This is the second item[SM_LITEM]This is the 3rd and final item."  In this way, list items can contain any sequence of ASCII characters.  
             3.  a thumbnail (an image file stored in its entirety)

    There will be a canonical list of tags, and ways to set them.  
    Also need to be able to see if a tag is missing.   

    CANONICAL SET OF DESCRIPTIVE TAGS SET AT WILL
    Title         -- a string 
    Authors       -- a comma-delimited list of names
    Description   -- a string 
    ScienceType   -- a comma-delimited list
    UCRL          -- a string 
    CodeName      -- a string 
    SimStartTime  -- a string entered implicitly as local time in flexible format ("3 hours ago", etc), stored as UTC, regurgitated explicitly in local time e.g "Mon Jan 14 17:18:12 PST 2013"
    SimDuration   -- days:hours:minutes
    SimCPUs       -- a string 
    SimCluster    -- a string 
    Keywords      -- a comma-delimited list of phrases  
    
    CANONICAL SET OF DESCRIPTIVE TAGS SET AT MOVIE CREATION TIME
    Creator  (Ideally, using the username of the user and information from the finger command if available)
    CreateDate      
    CreateHost
    CreateCommand

    QUERIES: (smquery)

    Probably most desirable:  "Tell me all the movies that match keyword pattern X"
                              "Tell me all the movies made by author A"
                              "Tell me all the movies made with code C"
                              "All movies made on machine M"
                              Need to be able to filter by date.  

    smquery --canonical                             --- lists the canonical list of tags.  
    smquery --missing *sm                           --- tells which canonical tags are missing from which of the given movies.
    smquery --listtags *sm                          --- gives a list of unique tags found in the given list of movies.  For each tag, also lists the movies that contain the tag.  
    smquery --tag Author *sm                        --- gives the unique list of values for movies in the list that contain metadata labeled by the tag "Author."  For each value, list the movies that have that value. 
    smquery --match Author '.*Streitz.*' *sm        --- lists the movies in the given list whose Author tag values match the expression ".*Streitz.*"
    smquery --thumbnail *sm                         --- extract the "thumbnail" frame for each movie in the list, saving as Moviename_thumbnail.png
    (FUTURE) smquery --thumbnail --res 100x100 *sm  --- extract the thumbnail for each movie in the list, saving as Moviename_thumbnail.png, at a resolution of 100x100
    (FUTURE) smquery --host rzbeast --list '*sm'    --- list all the movies on rzbeast in /usr/dvstmp/Movies or whatever canonical location

    SETTING AND CHANGING TAGS: (smtag) 
    smtag --tag Author --value 'Fred Streitz' *Streitz*sm   --- sets the Author tag in the given movies to "Fred Streitz"
    smtag --thumbnail 50 --xres 50 movie.sm                 --- set the thumbnail for the movie to be the image in frame 50, with X resolution 50 pixels and Y resolution automatically set appropriately
    smtag --canonical                                       --- prompt for all canonical tags, one by one. 


       METADATA TOOLS
       We will use the metadata to identify, list and describe our movies on the clusters. 
       We need a single list of all movies, merged but separable, with a way to view them.  
       A Qt GUI listing all movies would be a good start.  We could use metadata within the
       movies to characterize them more deeply. 
       I think that collecting the list of movies on each cluster into a database on a regular 
       basis would enable this to work.  

       METADATA FORMAT IN STREAMING MOVIES
       The metadata section shall begin at the first byte following the last frame of the 
       movie and continues to the end of the movie.  Metadata is a general term and can 
       include any arbitrary information, including binary payloads, that one might want
       to include with a movie.  The metadata is written  as follows. 
       Naturally, fields (2) - (4)  are big-endian.  
       Note that Field 3 is the beginning of the header, always 24 bytes before the end of the metadata.

         (1) n bytes: <tag name: null terminated ASCII sequence> 
         (2) p bytes: <data payload: see below>
         (3) 8 bytes: uint64 : a binary signature constant 0x0088BBeecc113399
         (4) 8 bytes: uint64 : tag name length (n)
         (5) 8 bytes: uint64 : payload length (p)  BEGINNING OF "HEADER" 

 
       This allows the metadata to be found simply by reading the last 8 bytes of the file, 
       confirming the binary signature (4), and reading field (3) to check if the tag is of
       interest.         
       If the tag name is not understood by the reader, the metadata item shall simply be 
       skipped.  
       You then can read the payload by seeking backwards and reading the data.  The next 
       metadata item is found by reading the   8 bytes preceding this one, and so on.  This
       backwards flow is convenient, flexible, and eliminates the need to store any more
       than just the metadata itself.  
       
       The data payload may theoretically in the future be of any format, including binary, 
       compressed,  "wrong" endian, etc.  However, currently supported payloads are all big 
       endian and start with a magic number and have the following formats: 
         METADATA_TYPE_ASCII:  8 bytes: magic number 0xA5C11A5C11A5C11A
                               8 bytes: uint64_t giving  length of null-terminated string
                               n bytes: null-terminated ASCII string,             
         METADATA_TYPE_DOUBLE: 8 bytes: magic number 0xF10A7F10A7F10A7F
                               8 bytes: double (FP64)
         METADATA_TYPE_INT64:  8 bytes: magic number 0x4244224442244442
                               8 bytes: long long (int64_t)
