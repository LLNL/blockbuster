'\" "
'\" ASCI Visualization Project  "
'\" "
'\" Lawrence Livermore National Laboratory "
'\" Information Management and Graphics Group "
'\" P.O. Box 808, Mail Stop L-561 "
'\" Livermore, CA 94551-0808 "
'\" "
'\" For information about this project see: "
'\" 	http://www.llnl.gov/sccd/lc/img/  "
'\" "
'\" 	or contact: asciviz@llnl.gov "
'\" "
'\" For copyright and disclaimer information see: "
'\"     man llnl_copyright "	
'\" "
'\" $Id: pt_pool_intro.3,v 1.1 2007/06/13 18:59:32 wealthychef Exp $ "
'\" $Name:  $ "
'\" "
'LINK pt_pool_init.3 pt_pool_destroy.3 pt_pool_add_work.3
.TH pt_pool_init 3
.SH NAME
pt_pool_init, pt_pool_destroy, pt_pool_add_work - a thread pool object 
.SH SYNOPSIS
.HP
.B
#include <pt/pt.h>
.HP
.B
void pt_pool_init(pt_pool_t tpool, int num_threads, int max_queue_size, 
int do_not_block_when_full)
.HP
.B
int pt_pool_add_work( pt_pool_t tpool,void (*routine)(void *),void *arg)
.HP
.B
void pt_pool_destroy( pt_pool_t tpool, int finish)
.SH DESCRIPTION
A pool object provides an input queue of work functions and
executes them using a pool of pthreads.  The user creates
the pool with a fixed number of worker threads and a maximum
queue size.  Work requests are started in the order in
which they were entered into the queue by the next available
thread.
.PP
.I
pt_pool_init()
initializes the pool, creating the threads and the input queue.
The size of each are passed as parameters.
The user may also select the behavior when the queue is full,
and additional work is added to the queue.  By default,
the
.I
pt_pool_add_work()
function blocks, but if the
.I
do_not_block_when_full
flag is set non-zero, such a call to
.I
pt_pool_add_work()
will return immediately with and error.  The user adds work
jobs to the queue, using
.I
pt_pool_add_work()
.  This call specifies a pointer to a function accepting a
single (void *) parameter, returning void.  This function
is called by one of the pool threads, passing the 
.I
arg
parameter value as the (void *) parameter.
.I
pt_pool_destroy() 
cleans up the pool, stopping all the threads.  If the 
.I
finish
flag is non-zero, this function will wait for all the
work currently in the queue to be finished before closing
down the pool.  If zero, only the functions currently
being executed will be finished.  All non-executed
work is dropped.
.SH SEE ALSO
.BR pthread_create (1)
.SH ORIGIN
.RS
"Using POSIX Threads: Programming with Pthreads"
.RE
Modified and corrected by:
.RS
ASCI Visualization Project 
.RE
.RS
Lawrence Livermore National Laboratory
.RE
.RS
Information Management and Graphics Group
.RE
