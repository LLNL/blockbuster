#!/usr/bin/env bash 
#set -xv
#
#       Convert an sm file into an MPEG file...
#
function usage() {
    echo "sm2mpg: usage:"
    echo "sm2mpg [OPTIONS] infile.sm outfile.mpg [fps]"
    echo "If fps is not given, the default is 30"
    echo "If the input movie is stereo, then only the left hand frames (odd frames) are used." 
    echo "OPTIONS:"
    echo "-s/--stereo: interpret the input movie as stereo." 
}

function errexit() {    
    echo '*************************************************'
    echo "ERROR: $1"
    echo '*************************************************'
    rm -rf ${tmpdir}
    exit 1
}

tmpdir=/tmp/$USER/sm2mpg.tmp.$RANDOM/
mkdir -p $tmpdir || errexit "Cannot make tmp directory $tmpdir"
if [ "$2" == "" ];  then
    usage
    errexit "Not enough args" 
fi

stereo=false
if [ "$1" == "-s" ] || [ "$1" == "--stereo" ]; then 
    shift 1
    stereo=true
fi

#
#       nframes/Stereo
#
infile="$1"
outfile="$2"
outfps=${3:-30}

# arg checking
if [ ${1:0:1} != '/' ]; then 
    infile=$(pwd)/$infile
fi
infiledot=$(expr ${#infile} - 3)
if [ "${infile:${infiledot}}" != '.sm' ]; then 
    errexit "Please specify an input movie name ending with '.sm'"
fi

if [ ${2:0:2} != '/' ]; then 
    outfile=$(pwd)/$outfile
fi
outfiledot=$(expr ${#outfile} - 4)
if [ "${outfile:$outfiledot}" != '.mpg' ]; then 
    errexit "Please specify an output movie name ending with '.mpg'"
fi

outframebase=_$(basename $outfile | sed 's/.sm//')

tmp=$(sminfo $infile)
if echo $tmp | grep Stereo >/dev/null 2>&1; then
    stereo=true
fi

ninput=$(sminfo $infile | grep Frames | cut "-d " -f2)

skip=1
if $stereo; then 
    skip=2
    ninput=$(expr $ninput / 2)
fi
#
#	Grab frame sizes
#
sizes=$(echo $tmp | cut -f5 -d":")
xsize1=$(echo $sizes | cut -f1 -d" ")
ysize1=$(echo $sizes | cut -f2 -d" ")

#
#       Size to the lower factor of 2...
#
xsize=$(expr $xsize1 / 2)
xsize=$(expr $xsize \* 2)
ysize=$(expr $ysize1 / 2)
ysize=$(expr $ysize \* 2)

#
#       Frames/fps/time...
#
outspf=$(python -c "print 1.0/${outfps} ")
tlen=$(python -c "print ${ninput}*${outspf} ")
noutput=$(python -c "print int(${tlen}*30.0) ")

#
#       Extract the frames in YUV format
#
echo "Extract the frames in YUV format using img2sm"
pushd $tmpdir

sm2img  -F yuv -s $skip $infile ${outframebase}_junk_%d || errexit "sm2img failed"
#
#       walk the movie duration, linking to the proper
#       source frame to approximate the desired framerate
#
echo "Linking frames to approximate the desired framerate"
linknum=0
while [ $linknum -lt $noutput ] ; do 
    echo -e "\rFrame: $linknum out of $noutput\c"
    t=$(python -c "print ${linknum}/30.0 ")
    outframe=$(python -c "print int(${t}/${outspf}) * $skip")
    ln -s ${outframebase}_junk_${outframe}.Y ${outframebase}_junk_ln_${linknum}.Y
    ln -s ${outframebase}_junk_${outframe}.U ${outframebase}_junk_ln_${linknum}.U
    ln -s ${outframebase}_junk_${outframe}.V ${outframebase}_junk_ln_${linknum}.V
    let linknum++
done
    
#
#       convert to mpeg using LibGen mpeg command
#
echo "convert to mpeg using LibGen mpeg command...." 
last=$(python -c "print int($noutput - 1)")
if ! mpeg -a 0 -b $last -h $xsize -v $ysize ${outframebase}_junk_ln_ -s $outfile -PF >mpeg.outlog; then
    errexit "LibGen mpeg command failed: $(cat mpeg.outlog)"
fi

#
#       clean up...
#
rm -rf ${tmpdir}
popd
#
#	Done!
#
